name: Create and publish a Docker image

on:
  push:
    branches:
      - main
      - dev
    tags:
      - 'v*'

# Shared environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "ghcr.io/retrodaredevil/graphql-echo"  # Our image name without tag on it


jobs:
  build-push:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        data:
          # TODO it might be worth randomizing the image-ref, as if identical pipelines run against the same commit, there's a race condition
          # NOTE: We cannot easily set each image-ref as an output of this matrix job and use it in the next job https://github.com/orgs/community/discussions/17245
          #   Because of this, we are duplicating the image-ref constants in the manifest-tag-push job. Update these constants there if necessary.
          - platform: "linux/amd64"
            platform-short: "amd64"
            image-ref: "ghcr.io/retrodaredevil/graphql-echo:sha-${{ github.sha }}-amd64"
          - platform: "linux/arm64"
            platform-short: "arm64"
            image-ref: "ghcr.io/retrodaredevil/graphql-echo:sha-${{ github.sha }}-arm64"

    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          # https://github.com/marketplace/actions/setup-java-jdk#supported-distributions
          distribution: 'temurin'
          java-version: 21

      # https://github.com/marketplace/actions/docker-login
      - name: Log in to the Container registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # https://github.com/marketplace/actions/docker-setup-buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build for ${{ matrix.data.platform }}
        run: ./gradlew bootBuildImage -Pplatform=${{ matrix.data.platform }} -PimageName=${{ matrix.data.image-ref }}

      - name: Push ${{ matrix.data.platform }} image to Docker Hub
        run: docker push ${{ matrix.data.image-ref }}

      # Collect the image references so that we don't have to duplicate the constants we have defined in the matrix step
      - name: Collect image references
        run: echo "imageRefs=${{ matrix.data.image-ref }}" >> "$GITHUB_OUTPUT"

  manifest-tag-push:
    needs: build-push
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write

    env:
      # IMAGE_REFS is a space-delimited list of image references that should already have been published to our registry
      IMAGE_REFS: "ghcr.io/retrodaredevil/graphql-echo:sha-${{ github.sha }}-amd64 ghcr.io/retrodaredevil/graphql-echo:sha-${{ github.sha }}-arm64"

    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # https://github.com/marketplace/actions/docker-login
      - name: Log in to the Container registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # https://github.com/marketplace/actions/docker-metadata-action
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.IMAGE_NAME }}
          # expressions: https://docs.github.com/en/actions/learn-github-actions/expressions
          tags: |
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,priority=750,enable=${{ startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc') && !contains(github.ref, 'beta') }}
            type=raw,value=beta,priority=740,enable=${{ startsWith(github.ref, 'refs/tags/') && (contains(github.ref, 'rc') || contains(github.ref, 'beta')) }}
            type=edge,branch=master
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' }}
            type=sha,format=short
          # https://github.com/opencontainers/image-spec/blob/main/annotations.md#pre-defined-annotation-keys
          labels: |
            maintainer=retrodaredevil
            org.opencontainers.image.title=GraphQL Echo
            org.opencontainers.image.description=A container hosting the GraphQL Echo server running on port 8080 by default.
            org.opencontainers.image.source=https://github.com/retrodaredevil/graphql-echo
            org.opencontainers.image.ref.name=${{ matrix.data.image-name }}
            org.opencontainers.image.vendor=retrodaredevil
            org.opencontainers.image.url=https://github.com/retrodaredevil/graphql-echo
            org.opencontainers.image.authors=retrodaredevil

      - name: Create and push multi-architecture manifest
        run: |
          # The tags variable is meant to be used without quoting in commands
          tags=$(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' ')
          
          primary_tag=$(echo $tags | awk '{print $1}')
          manifest_name="${primary_tag%:*}"  # basically just extract the image name (remove the tag)
          echo "Manifest name is $manifest_name"
          echo "Creating manifest"
          manifest_command=("docker" "manifest" "create" "$manifest_name")
          for image in $IMAGE_REFS; do
            manifest_command+=("--amend" "$image")
          done
          echo "We will execute this manifest create command:"
          echo "${manifest_command[@]}"
          "${manifest_command[@]}"
          echo "Successfully created a manifest"
          
          #for tag in $tags; do
          #  echo "Annotating $tag"
          #  docker manifest annotate "$manifest_name" "$tag"
          #  echo "Success"
          #done
          
          echo "Gonna push now"
          # https://docs.docker.com/reference/cli/docker/manifest/push/
          docker manifest push "$manifest_name"
