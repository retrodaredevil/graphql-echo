type Query {
    "Returns a response that allows you to retrieve all HTTP headers present on this request. Also allows you to get specific headers or return an error if a particular header is not present."
    echoHttpHeaders: HeaderResponse!

    generateDummyTimeseries(from: Long!, to: Long!, nodeCount: Int, processorCount: Int, datapointCount: Int): DummyTimeseriesResponse!
}

"A 64-bit signed integer"
scalar Long

"This response contains many different fields to get and expect (assert) that certain headers are present."
type HeaderResponse {
    "Gets the header values for the given header name or returns null if that header is not present"
    getHeaderMulti(name: String!): [String!]
    "Gets the header value for the given header name and expects it to not be a multi header or returns null if that header is not present"
    getHeader(name: String!): String
    "Gets and expects the header values for the given header name"
    expectHeaderMulti(name: String!): [String!]!
    "Gets and expects a single header value for the given header name"
    expectHeader(name: String!): String!

    entries: [HeaderEntry!]!
}

type HeaderEntry {
    name: String!
    values: [String!]!
}

type DummyTimeseriesResponse {
    serverName: String!
    nodeData: [DummyTimeseriesNodeData!]!
}

type DummyTimeseriesNodeData {
    nodeName: String!
    datapoints: [DummyTimeseriesDatapoint!]!
}
type DummyTimeseriesDatapoint {
    dateMillis: Long!
    dateEpochSecond: Long!
    # TODO add other time formats here for testing
    processorTemperatures: [DummyTimeseriesProcessorTemperature!]!
}
type DummyTimeseriesProcessorTemperature {
    processor: Int!
    temperatureCelsius: Float!
}
